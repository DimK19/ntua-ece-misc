ΘΕΜΑ 1

Το συντακτικό δένδρο της γραμματικής αυτής διακλαδώνεται αμέσως από το αρχικό σύμβολο, είτε σε συμβολοσειρά <S> a είτε <D> b
η S έχει τερματικό σύμβολο 0 1, οπότε βάσει και του κανόνα παραγωγής S -> 0 S 1, κάθε τελική συμβολοσειρά που παράγει η γραμματική θα έχει την μορφή 0n 1n a
όπου 0n σημαίνει n διαδοχικά 0, και n φυσικός. Είναι προφανές ότι κάθε τέτοια συμβολοσειρά παράγεται με μοναδικό τρόπο, επομένως δεν υπάρχουν δύο συντακτικά δένδρα για την ίδια.
Το ίδιο ισχύει και για την διακλάδωση προς D, με τελική συμβολοσειρά 0(n) 1(2n) b.
Και λόγω των συμβόλων a και b, οι δύο διακλαδώσεις από το αρχικό σύμβολο δεν παράγουν ποτέ ίδια συμβολοσειρά.
Επομένως καμία συμβολοσειρά που παράγεται από την γραμματική δεν μπορεί να έχει πάνω από 1 συντακτικό δένδρο, οπότε η γραμματική είναι μη διφορούμενη.

ΘΕΜΑ 2
ΑΜ1 = 0, ΑΜ2 = 7, ΑΜ3 = 7

γ1)

7 (αμ2) 0
7 (αμ2) 0
7 (αμ3) 42

γ2)

7 (αμ2) 0
42
7 (αμ3) 42

δ1)

7(αμ2) 0
7 (αμ3)
7 (αμ3)

δ2)

7 (αμ2) 7 (αμ3)
7 (αμ3)
0

ΘΕΜΑ 3

α) Μπορώ να προσομοιώσω τις κλάσεις χρησιμοποιώντας την απλούστερη δομή της C, για παράδειγμα ως εξής

typedef struct MyClass
{
	int data;
	float value;
	...
} MyClass ;

Οι μέθοδοι θα πρέπει να ορίζονται εκτός του struct, και να λαμβάνουν ως όρισμα το εκάστοτε "αντικείμενο" (pointer)

int getData(MyClass* mc)
{
	return mc->data; // θεωρητικό παράδειγμα, υποθέτω πως mc != nullptr
}

β) Για την κληρονομικότητα, η κλάση-απόγονος θα πρέπει να έχει ένα πεδίο που θα είναι "αντικείμενο" της κλάσης γονέα. Αυτό δεν είναι ακριβώς κληρονομικότητα, καθώς χρησιμοποιείται μόνο ένα instance της κλάσης, αλλά με αυτόν τον τρόπο δίνεται πρόσβαση στα πεδία και τις μεθόδους της:

typedef struct Child
{
	struct MyClass* parent;
	int otherdata;
}

int getData(Child* c)
{
	return c->parent->data;
}

γ) Αντιστοίχως μπορούν να χρησιμοποιηθούν περισσότεροι δείκτες. Σε περίπτωση που χρειαζόμαστε υπερφόρτωση μεθόδων ή πολυμορφισμό, θα πρέπει να ορίσουμε πεδίο στην κλάση που θα καθορίζει τον τύπο αυτής στο εκάστοτε instance.


ΘΕΜΑ 6


import sys
text = sys.stdin.readlines()

# text = input()
# text = "be smarter now and forget the rest here is what matters the street that crosses the stream is the longest of all streets"

# parse input
wordlist = []
for line in text:
    x = line.replace('\n', ' ')
    for w in x.split(): wordlist.append(w)
    
wordlist = list(set(wordlist)) # αφαίρεση διπλών λέξεων

freq = {}
for w in wordlist:
    s = set(w)
    k = ''.join(s)
    k = ''.join(sorted(k)) # για αποφυγή collisions στο λεξικό
    if k not in freq.keys():
        freq.update({k : 1})
    else:
        freq[k] += 1

maxfr = max(freq.values())

fm = []

for w in wordlist:
    s = set(w)
    k = ''.join(s)
    k = ''.join(sorted(k))
    if(freq[k] == maxfr):
        fm.append(w)
 
print(len(freq.keys()), " different signature(s)")
print("maximum friendliness is ", maxfr)
print("friendliest words are:")
for i in sorted(fm): print(i)
